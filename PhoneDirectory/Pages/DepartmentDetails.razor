@page "/DepartmentDetails/{Id:int}"

@inject IDataFactory dataFactory
@inject NavigationManager navManager

<head>
    <PageTitle>Department Details</PageTitle>
    <link rel="stylesheet" href="~/css/site.css"/>
</head>
<body>
    <div class="department-details-grid-container">
        <div class="department-details-heading">
            <h3 class="page-heading">Department Details</h3>
            <div>
                <button class="button" @onclick="(() => OpenDirectory())">Go To Directory</button>
            </div>
        </div>

        @if(validId)
        {
                <div>
                <AuthorizeView Context="Auth"> 
                    <Authorized>
                        <div class="department-edit-form-container">
                            <div>
                                <h1 id="department-edit-header">Edit Department - @department.Name</h1>
                            </div>
                            <div>
                                <EditForm Model="department">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="department-form-item">
                                        <label class="department-form-label" for="department-name">Department Name</label>
                                        <InputText class="input-box" id="department-name" placeholder="@department.Name" @bind-Value="tempDepartmentName">@department.Name</InputText>
                                    </div>
                                    <div>
                                        <button id="submit-button" class="button" @onclick="SaveDepartmentForm">Submit</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div>
                            <EditForm Model="department">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                    <div class="department-form-item">
                                        <label class="department-form-label" for="department-name">Department Name:</label>
                                        <InputText disabled class="input-box" id="department-name" @bind-Value="department.Name"/>
                                    </div>
                                </EditForm>
                            </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        }
        else
        {
            <h1 class="error-heading">This department does not exist.</h1>
        }

    </div>
</body>
@code {
    [Parameter]
    public int Id { get; set; }
    private List<EmployeeModel> departmentEmployees;
    private DepartmentModel department;

    private string tempDepartmentName;
    private bool validId;

    protected override async Task OnInitializedAsync()
    {
        if(!dataFactory.Departments.Any(d => d.Id == Id)){
            validId = false;
        } else 
        {
            department = (DepartmentModel)dataFactory.Departments.Where(d => d.Id == Id).First();
            departmentEmployees = dataFactory.Employees.Where(e => e.DepartmentId == Id).ToList();
            validId = true;
        }
        
        await base.OnInitializedAsync();
    }

    private void SaveDepartmentForm(){
        department.Name = tempDepartmentName;
        //dataFactory;
    }

    private void OpenCreateDepartment(){
        navManager.NavigateTo("/Create/Department");
    }

    private void OpenDirectory()
    {
        navManager.NavigateTo("/");
    }
}
