@page "/EmployeeDetails/{Id:int}"

@inject IDataFactory dataFactory
@inject NavigationManager navManager

<h3>EmployeeDetails</h3>
<div>
    <button @onclick="(() => OpenDirectory())">Go To Directory</button>
</div>
<div class="employee-details-form">
    <EditForm Model="employee" OnValidSubmit="SaveEmployeeForm">
        <div class="employee-form-item">
            <label for="first-name">First Name</label>
            <InputText id="first-name" @bind-Value="employee.FirstName" @onchange="OnInfoChange"/>
        </div>
        <div class="employee-form-item">
            <label for="last-name">Last Name</label>
            <InputText id="last-name" @bind-Value="employee.LastName" @onchange="OnInfoChange"/>
        </div>
        <div class="employee-form-item">
            <label for="phone-main">Main Phone</label>
            <InputText id="phone-main" @bind-Value="employee.PhoneMain" @onchange="OnInfoChange"/>
        </div>
        <div class="employee-form-item">
            <label for="extension">Extension</label>
            <InputText id="extension" @bind-Value="employee.Extension" @onchange="OnInfoChange"/>
        </div>
        <div class="employee-form-item">
            <label for="phone-mobile">Mobile Phone</label>
            <InputText id="phone-mobile" @bind-Value="employee.PhoneMobile" @onchange="OnInfoChange"/>
        </div>
        <div class="employee-form-item">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="employee.Email" @onchange="OnInfoChange"/>
        </div>
        <div class="employee-form-item">
            <label for="department">Department</label>
            <InputSelect id="department" @bind-Value="employee.Department" @onchange="OnInfoChange">
                @foreach (var department in dataFactory.Departments)
                {
                    if (department == employee.Department)
                    {
                        <option selected value="@department">@department.Name</option>
                    }
                    else
                    {
                        <option value="@department">@department.Name</option>
                    }
                }
            </InputSelect>
        </div>
        @*<div class="employee-form-item">
            <label for="title">Title</label>
            <InputSelect id="title" TValue="TitleModel" @bind-value="employee.Title" @onchange="OnInfoChange">
                @foreach (var title in dataFactory.Titles)
                {
                    if (title != null)
                    {
                        if (title == employee.Title)
                        {
                                                <option selected value="@title">@title.Name</option>
                        }
                        else
                        {
                                                <option value="@title">@title.Name</option>
                        }
                    }
                }
            </InputSelect>
        </div>*@
        <div class="employee-form-item">
            <label for="supervisor">Supervisor</label>
            <InputSelect id="supervisor" @bind-Value="employee.Supervisor" @onchange="OnInfoChange">
                @foreach(var supervisor in availableSupervisors)
                {
                    <option value="@supervisor">@supervisor.FirstName @supervisor.LastName (@supervisor.Title?.Name)</option>
                }
            </InputSelect>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private EmployeeModel employee;
    private List<EmployeeModel> availableSupervisors = new List<EmployeeModel>();

    protected override async Task OnInitializedAsync()
    {
        var employeesList = dataFactory.Employees;

        employee = employeesList.First(e => e.Id == Id);
        availableSupervisors = PopulateAvailableSupervisors();

        await base.OnInitializedAsync();
    }

    private List<EmployeeModel> PopulateAvailableSupervisors()
    {
        var output = dataFactory.Employees;
        if(employee.Title == null)
        {
            output = output.Where(e => e.Department == employee.Department)
                                                .Where(e => e.Title?.TitleLevel >= 4)
                                                .Where(e => e.Title?.TitleLevel < 7).ToList();
        }else if(employee.Title?.TitleLevel > 4) 
        {
            output = output.Where(e => e.Department == employee.Department)
                                                .Where(e => e.Title?.TitleLevel >= 4)
                                                .Where(e => e.Title?.TitleLevel < employee.Title.TitleLevel).ToList();
        } else 
        {
            int? titleLevel = employee.Title?.TitleLevel;
            output = output.Where(e => e.Department == employee.Department)
                            .Where(e => e.Title?.TitleLevel == (employee.Title?.TitleLevel - 1)).ToList();
        }
        return output;

    }

    private void OnInfoChange()
    {

    }

    private void SaveEmployeeForm()
    {

    }

    private void OpenDirectory()
    {
        navManager.NavigateTo("/");
    }

}
