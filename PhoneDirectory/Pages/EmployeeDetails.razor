@page "/EmployeeDetails/{Id:int}"

@inject IDataFactory dataFactory
@inject NavigationManager navManager

@using Models;

<head>
    <PageTitle>Employee Details</PageTitle>
    <link rel="stylesheet" href="~/css/site.css"/>
</head>
<body>
    <div class="employee-details-grid-container">
        <div class="employee-details-heading">
            <h3 class="page-heading">Employee Details</h3>
            <div>
                <button class="button" @onclick="(() => OpenDirectory())">Go To Directory</button>
            </div>
        </div>

        <!--Employee edit form-->

        <div>
            <AuthorizeView Context="Auth">
                <Authorized>
                <div class="employee-edit-form-container">
                    <div>
                        <h1>Edit Employee</h1>    
                    </div>
                    <div class="employee-details-form">
                        <EditForm Model="employee">
                            <DataAnnotationsValidator />
                             <ValidationSummary />
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="first-name" >First Name</label>
                                <InputText class="input-box" id="first-name" @bind-Value="employee.FirstName" @onfocus="((args) => OnInfoChange(args))"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="last-name">Last Name</label>
                                <InputText class="input-box" id="last-name" @bind-Value="@employee.LastName" @onfocus="((args) => OnInfoChange(args))"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="phone-main">Main Phone</label>
                                <InputText class="input-box" id="phone-main" @bind-Value="@employee.PhoneMain" @onfocus="((args) => OnInfoChange(args))"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="extension">Extension</label>
                                <InputText class="input-box" id="extension" @bind-Value="@employee.Extension" @onfocus="((args) => OnInfoChange(args))"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="phone-mobile">Mobile Phone</label>
                                <InputText class="input-box" id="phone-mobile" @bind-Value="@employee.PhoneMobile" @onfocus="((args) => OnInfoChange(args))"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="email">Email</label>
                                <InputText class="input-box" id="email-box" @bind-Value="@employee.Email" @onfocus="((args) => OnInfoChange(args))"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="department">Department</label>
                                <InputSelect class="input-select" id="department" @bind-Value="@employee.DepartmentId" @onfocus="((args) => OnInfoChange(args))" @onfocusout="((args) => OnInfoChange(args))">
                                    @foreach (var department in dataFactory.Departments)
                                    {
                                        if (department.Id == employee.DepartmentId)
                                        {
                                            <option value="@department.Id" selected="@(department.Id == employee.DepartmentId)">@department.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@department.Id">@department.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="title">Title</label>
                                <InputSelect class="input-select" id="title" @bind-Value="employee.TitleId" @onfocus="((args) => OnInfoChange(args))" @onfocusout="((args) => OnInfoChange(args))">
                                    @foreach (var title in dataFactory.Titles)
                                    {
                                        if (title == employee.Title)
                                        {
                                            <option selected value="@title.Id">@title.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@title.Id">@title.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="supervisor">Supervisor</label>
                                <InputSelect class="input-select" id="supervisor" @bind-Value="employee.SupId" @onfocus="((args) => OnInfoChange(args))">
                                    @foreach (var supervisor in availableSupervisors)
                                        {
                                            <option value="@supervisor.Id">@supervisor.FirstName @supervisor.LastName (@supervisor.Title.Name)</option>
                                        }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="notes">Notes</label>
                                <InputTextArea class="input-text-area" id="notes" @bind-Value="@employee.Notes" @onfocus="((args) => OnInfoChange(args))"/>
                            </div>
                            <div>
                               <button class="button" id="submit-button" @onclick="SaveEmployeeForm">@submitButtonText</button>
                               <button class="button" @onclick="ResetForm">Reset</button>
                               <button class="button" id="delete-employee-button" @onclick="DeleteEmployee">@deleteButtonText</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
                </Authorized>
                <NotAuthorized>
                    <div class="employee-details-form">
                        <EditForm Model="employee" OnValidSubmit="SaveEmployeeForm">
                            <DataAnnotationsValidator />
                             <ValidationSummary />
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="first-name">First Name:</label>
                                <InputText disabled class="input-box" id="first-name" @bind-Value="employee.FirstName"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="last-name">Last Name:</label>
                                <InputText disabled class="input-box" id="last-name" @bind-Value="employee.LastName"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="phone-main">Main Phone:</label>
                                <InputText disabled class="input-box" id="phone-main" @bind-Value="employee.PhoneMain"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="extension">Extension:</label>
                                <InputText disabled class="input-box" id="extension" @bind-Value="employee.Extension"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="phone-mobile">Mobile Phone:</label>
                                <InputText disabled class="input-box" id="phone-mobile" @bind-Value="employee.PhoneMobile"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="email">Email:</label>
                                <InputText disabled class="input-box" id="email" @bind-Value="employee.Email"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="department">Department:</label>
                                <InputSelect disabled class="input-select" id="department" @bind-Value="employee.Department">
                                    @foreach (var department in dataFactory.Departments)
                                    {
                                        if (department == employee.Department)
                                        {
                                            <option selected value="@department">@department.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@department">@department.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="title">Title:</label>
                                <InputSelect disabled class="input-select" id="title" @bind-Value="employee.Title.Name">
                                    @foreach (var title in dataFactory.Titles)
                                    {
                                        if (title == employee.Title)
                                        {
                                            <option selected value="@title.Name">@title.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@title.Name">@title.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="supervisor">Supervisor:</label>
                                <InputSelect disabled class="input-select" id="supervisor" @bind-Value="employee.SupId">
                                    @foreach (var supervisor in availableSupervisors)
                                        {
                                            <option value="@supervisor.Id">@supervisor.FirstName @supervisor.LastName (@supervisor.Title.Name)</option>
                                        }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" id="notes-label" for="notes">Notes:</label>
                                <InputTextArea disabled class="input-text-area" id="notes" @bind-Value="employee.Notes"/>
                            </div>
                        </EditForm>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>        
    </div>
</body>
    
    


@code {
    [Parameter]
    public int Id { get; set; }

    private EmployeeModel employee;
    private List<EmployeeModel> availableSupervisors = new List<EmployeeModel>();
    private string submitButtonText;
    private bool changesMade = false;
    private bool changesSaved = false;
    private bool confirmDelete = false;
    private string deleteButtonText;


    protected override async Task OnInitializedAsync()
    {
        var employeesList = dataFactory.Employees;


        employee = employeesList.First(e => e.Id == Id);
        availableSupervisors = PopulateAvailableSupervisors();
        submitButtonText = "Submit";
        deleteButtonText = "Delete Employee";



        await base.OnInitializedAsync();
    }

    private List<EmployeeModel> PopulateAvailableSupervisors()
    {
        availableSupervisors = dataFactory.GetAvailableSupervisors(employee.TitleId, employee.DepartmentId);

        return availableSupervisors;
    }

    private void OnInfoChange(FocusEventArgs args)
    {
        changesMade = true;
        submitButtonText = "submit";
        PopulateAvailableSupervisors();
    }

    private void SaveEmployeeForm()
    {
        changesSaved = true;
        changesMade = false;
        submitButtonText = "Changes Saved";

        dataFactory.UpdateEmployeeAsync(employee);
    }

    private void NewEmployeePage()
    {
        if(!changesSaved)
        {
            dataFactory.ClearCache();
        }
        navManager.NavigateTo($"/Create/Employee");
    }

    private async Task ResetForm()
    {
        if (!changesSaved)
        {
            dataFactory.ClearCache();
            await dataFactory.PopulateDataAsync();
        }
        navManager.NavigateTo($"/EmployeeDetails/{employee.Id}", forceLoad: true);
    }

    private async void DeleteEmployee()
    {
        if(deleteButtonText == "Delete Employee"){
            deleteButtonText = "Confirm Delete";
            StateHasChanged();
        } else if(deleteButtonText == "Confirm Delete"){
            await dataFactory.DeleteEmployeeAsync(employee);
            deleteButtonText = "Employee Deleted!";
            await Task.Delay(3500);
            OpenDirectory();
        }
    }

    private void OpenDirectory()
    {
        if (!changesSaved)
        {
            dataFactory.ClearCache();
        }
        navManager.NavigateTo("/");
    }

}
