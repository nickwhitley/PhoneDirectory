@page "/EmployeeDetails/{Id:int}"

@inject IDataFactory dataFactory
@inject NavigationManager navManager

<h3>EmployeeDetails</h3>
<div>
    <button @onclick="(() => OpenDirectory())">Go To Directory</button>
    <button class="new-employee-button" @onclick="(() => NewEmployeePage())">New Employee</button>
</div>
    <div>
        <h1>Edit Employee</h1>    
    </div>
    <div class="employee-details-form">
        <EditForm Model="employee" OnValidSubmit="SaveEmployeeForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="employee-form-item">
                <label for="first-name">First Name</label>
                <InputText id="first-name" @bind-Value="employee.FirstName"/>
            </div>
            <div class="employee-form-item">
                <label for="last-name">Last Name</label>
                <InputText id="last-name" @bind-Value="employee.LastName" @onchange="OnInfoChange"/>
            </div>
            <div class="employee-form-item">
                <label for="phone-main">Main Phone</label>
                <InputText id="phone-main" @bind-Value="employee.PhoneMain" @onchange="OnInfoChange"/>
            </div>
            <div class="employee-form-item">
                <label for="extension">Extension</label>
                <InputText id="extension" @bind-Value="employee.Extension" @onchange="OnInfoChange"/>
            </div>
            <div class="employee-form-item">
                <label for="phone-mobile">Mobile Phone</label>
                <InputText id="phone-mobile" @bind-Value="employee.PhoneMobile" @onchange="OnInfoChange"/>
            </div>
            <div class="employee-form-item">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="employee.Email" @onchange="OnInfoChange"/>
            </div>
            <div class="employee-form-item">
                <label for="department">Department</label>
                <InputSelect id="department" @bind-Value="employee.Department.Name" @onchange="OnInfoChange">
                    @foreach (var department in dataFactory.Departments)
                    {
                        if (department == employee.Department)
                        {
                                    <option selected value="@department.Name">@department.Name</option>
                        }
                        else
                        {
                                    <option value="@department.Name">@department.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="employee-form-item">
                <label for="title">Title</label>
                <InputSelect id="title" @bind-Value="employee.Title.Name" @onchange="OnInfoChange">
                    @foreach (var title in dataFactory.Titles)
                    {
                        if (title == employee.Title)
                        {
                                    <option selected value="@title.Name">@title.Name</option>
                        }
                        else
                        {
                                    <option value="@title.Name">@title.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="employee-form-item">
                <label for="supervisor">Supervisor</label>
                <InputSelect id="supervisor" @bind-Value="employee.SupId" @onchange="OnInfoChange">
                    @foreach (var supervisor in availableSupervisors)
                    {
                            <option value="@supervisor.Id">@supervisor.FirstName @supervisor.LastName (@supervisor.Title.Name)</option>
                    }
                </InputSelect>
            </div>
            <div class="employee-form-item">
                <label for="notes">Notes</label>
                <InputTextArea id="notes" @bind-Value="employee.Notes"/>
            </div>
            <div>
               <button type="submit" class="form-submit-button">Submit</button>

            </div>
        </EditForm>
    </div>


@code {
    [Parameter]
    public int Id { get; set; }

    private EmployeeModel employee;
    private List<EmployeeModel> availableSupervisors = new List<EmployeeModel>();
    private bool changesMade = false;
    private bool createNewEmployee = false;

    //new employee values
    private string firstName;
    private string lastName;
    private string phoneMain;
    private string phoneMobile;
    private string extension;
    private string notes;
    private int titleId;
    private int departmentId;
    private int supId;
    private string email;

    protected override async Task OnInitializedAsync()
    {
        var employeesList = dataFactory.Employees;


        employee = employeesList.First(e => e.Id == Id);
        availableSupervisors = PopulateAvailableSupervisors();



        await base.OnInitializedAsync();
    }

    private List<EmployeeModel> PopulateAvailableSupervisors()
    {
        var output = dataFactory.Employees;
        if(employee.Title == null)
        {
            output = output.Where(e => e.Department == employee.Department)
                                                .Where(e => e.Title?.TitleLevel >= 4)
                                                .Where(e => e.Title?.TitleLevel < 7).ToList();
        }else if(employee.Title?.TitleLevel > 4) 
        {
            output = output.Where(e => e.Department == employee.Department)
                                                .Where(e => e.Title?.TitleLevel >= 4)
                                                .Where(e => e.Title?.TitleLevel < employee.Title.TitleLevel).ToList();
        } else 
        {
            int? titleLevel = employee.Title?.TitleLevel;
            output = output.Where(e => e.Department == employee.Department)
                            .Where(e => e.Title?.TitleLevel == (employee.Title?.TitleLevel - 1)).ToList();
        }
        return output;

    }

    private void OnInfoChange()
    {
        changesMade = true;
        StateHasChanged();
    }

    private void SaveEmployeeForm()
    {
        //dataFactory.UpdateEmployeeAsync(employee);
    }

    private void NewEmployeePage()
    {
        navManager.NavigateTo($"Create/{0}");

    }

    private void OpenDirectory()
    {
        navManager.NavigateTo("/");
    }

}
