@page "/EmployeeDetails/{Id:int}"

@inject IDataFactory dataFactory
@inject NavigationManager navManager

<head>
    <PageTitle>Employee Details</PageTitle>
</head>
<body>
    <div>
        <h3>Employee Details</h3>
        <div>
            <button class="button" @onclick="(() => OpenDirectory())">Go To Directory</button>
            <AuthorizeView>
                <button class="button" @onclick="(() => NewEmployeePage())">New Employee</button>
            </AuthorizeView>
        </div>

        <!--Employee edit form-->

        <div>
            <AuthorizeView Context="Auth">
                <Authorized>
                    <div>
                        <h1>Edit Employee</h1>    
                    </div>
                    <div class="employee-details-form">
                        <EditForm Model="employee" OnValidSubmit="SaveEmployeeForm">
                            <DataAnnotationsValidator />
                             <ValidationSummary />
                            <div class="employee-form-item">
                                <label for="first-name">First Name</label>
                                <InputText class="input-box" id="first-name" @bind-Value="employee.FirstName"/>
                            </div>
                            <div class="employee-form-item">
                                <label for="last-name">Last Name</label>
                                <InputText class="input-box" id="last-name" @bind-Value="employee.LastName" @onchange="OnInfoChange"/>
                            </div>
                            <div class="employee-form-item">
                                <label for="phone-main">Main Phone</label>
                                <InputText class="input-box" id="phone-main" @bind-Value="employee.PhoneMain" @onchange="OnInfoChange"/>
                            </div>
                            <div class="employee-form-item">
                                <label for="extension">Extension</label>
                                <InputText class="input-box" id="extension" @bind-Value="employee.Extension" @onchange="OnInfoChange"/>
                            </div>
                            <div class="employee-form-item">
                                <label for="phone-mobile">Mobile Phone</label>
                                <InputText class="input-box" id="phone-mobile" @bind-Value="employee.PhoneMobile" @onchange="OnInfoChange"/>
                            </div>
                            <div class="employee-form-item">
                                <label for="email">Email</label>
                                <InputText class="input-box" id="email" @bind-Value="employee.Email" @onchange="OnInfoChange"/>
                            </div>
                            <div class="employee-form-item">
                                <label for="department">Department</label>
                                <InputSelect id="department" @bind-Value="employee.Department.Name" @onchange="OnInfoChange">
                                    @foreach (var department in dataFactory.Departments)
                                    {
                                        if (department == employee.Department)
                                        {
                                            <option selected value="@department.Name">@department.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@department.Name">@department.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label for="title">Title</label>
                                <InputSelect id="title" @bind-Value="employee.Title.Name" @onchange="OnInfoChange">
                                    @foreach (var title in dataFactory.Titles)
                                    {
                                        if (title == employee.Title)
                                        {
                                            <option selected value="@title.Name">@title.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@title.Name">@title.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label for="supervisor">Supervisor</label>
                                <InputSelect id="supervisor" @bind-Value="employee.SupId" @onchange="OnInfoChange">
                                    @foreach (var supervisor in availableSupervisors)
                                        {
                                            <option value="@supervisor.Id">@supervisor.FirstName @supervisor.LastName (@supervisor.Title.Name)</option>
                                        }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label for="notes">Notes</label>
                                <InputTextArea class="input-box" id="notes" @bind-Value="employee.Notes"/>
                            </div>
                            <div>
                               <button type="submit" class="button">Submit</button>

                            </div>
                        </EditForm>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div>
                        <div>
                            <label id="employee-details-name">@employee.FirstName @employee.LastName</label>
                        </div>
                        <div>
                            <label for="employee-details-department">Department</label>
                            <span id="employee-details-department">@employee.Department.Name</span>
                        </div>
                        <div>
                            <label for="employee-details-title">Title</label>
                            <span id="employee-details-title">@employee.Title.Name</span>
                        </div>
                        <div>
                            <label for="employee-details-phone-main">Main Phone</label>
                            <span id="employee-details-phone-main">@employee.PhoneMain</span>
                        </div>
                        <div>
                            <label for="employee-details-extension">Extension</label>
                            <span id="employee-details-extension">@employee.Extension</span>
                        </div>
                        <div>
                            <label for="employee-details-phone-mobile">Mobile Phone</label>
                            <span id="employee-details-phone-mobile">@employee.PhoneMobile</span>
                        </div>
                        <div>
                            <label for="employee-details-email">Email</label>
                            <span id="employee-details-email">@employee.Email</span>
                        </div>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <!--employee details-->
        <div>

        </div>
        
    </div>
    
</body>
    
    


@code {
    [Parameter]
    public int Id { get; set; }

    private EmployeeModel employee;
    private List<EmployeeModel> availableSupervisors = new List<EmployeeModel>();
    private bool changesMade = false;
    private bool createNewEmployee = false;

    //new employee values
    private string firstName;
    private string lastName;
    private string phoneMain;
    private string phoneMobile;
    private string extension;
    private string notes;
    private int titleId;
    private int departmentId;
    private int supId;
    private string email;

    protected override async Task OnInitializedAsync()
    {
        var employeesList = dataFactory.Employees;


        employee = employeesList.First(e => e.Id == Id);
        availableSupervisors = PopulateAvailableSupervisors();



        await base.OnInitializedAsync();
    }

    private List<EmployeeModel> PopulateAvailableSupervisors()
    {
        var output = dataFactory.Employees;
        if(employee.Title == null)
        {
            output = output.Where(e => e.Department == employee.Department)
                                                .Where(e => e.Title?.TitleLevel >= 4)
                                                .Where(e => e.Title?.TitleLevel < 7).ToList();
        }else if(employee.Title?.TitleLevel > 4) 
        {
            output = output.Where(e => e.Department == employee.Department)
                                                .Where(e => e.Title?.TitleLevel >= 4)
                                                .Where(e => e.Title?.TitleLevel < employee.Title.TitleLevel).ToList();
        } else 
        {
            int? titleLevel = employee.Title?.TitleLevel;
            output = output.Where(e => e.Department == employee.Department)
                            .Where(e => e.Title?.TitleLevel == (employee.Title?.TitleLevel - 1)).ToList();
        }
        return output;

    }

    private void OnInfoChange()
    {
        changesMade = true;
        StateHasChanged();
    }

    private void SaveEmployeeForm()
    {
        //dataFactory.UpdateEmployeeAsync(employee);
    }

    private void NewEmployeePage()
    {
        navManager.NavigateTo($"/Create/Employee");

    }

    private void OpenDirectory()
    {
        navManager.NavigateTo("/");
    }

}
