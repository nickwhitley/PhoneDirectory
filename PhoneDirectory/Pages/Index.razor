@page "/"

@inject IDataFactory dataFactory
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Directory Home</PageTitle>

@if (employees is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table id="employee-table" class="table table-striped">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Main Phone</th>
                <th>Mobile Phone</th>
                <th>Extension</th>
                <th>Notes</th>
                <th>Title</th>
                <th>Department</th>
                <th>Supervisor</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.PhoneMain</td>
                    <td>@employee.PhoneMobile</td>
                    <td>@employee.Extension</td>
                    <td>@employee.Notes</td>
                    @if(employee.Title is null){
                        <td></td>
                    } else {
                        <td>@employee.Title.Name</td>
                    }
                    @if(employee.Department is null){
                        <td></td>
                    } else {
                        <td>@employee.Department.Name</td>
                    }
                    
                    @if (employee.Supervisor is null)
                    {
                        <td></td>
                    } else {
                        <td>@employee.Supervisor.LastName</td>
                    }
                    <td>@employee.Email</td>

                </tr>
            }
        </tbody>
    </table>
    <table id="department-table" class="table table-striped">
        <thead>
            <tr>
                <th>Department</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var department in departments)
            {
                <tr>
                    <td>@department.Name</td>
                </tr>
            }
        </tbody>
    </table>
    <table id="title-table" class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var title in titles)
            {
                <tr>
                    <td>@title.Name</td>
                </tr>
            }
        </tbody>
    </table>
    }


@code 
{
    private List<EmployeeModel> employees;
    private List<DepartmentModel> departments;
    private List<TitleModel> titles;

    private string searchText = "";
    private string selectedDepartment = "All";
    private string selectedTitle = "All";

    protected override async Task OnInitializedAsync()
    {
        await dataFactory.PopulateDataAsync();
        employees = dataFactory.Employees;
        departments = dataFactory.Departments;
        titles = dataFactory.Titles;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadFilter();
        StateHasChanged();
    }

    private async Task LoadFilter()
    {
        var results = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = results.Success ? results.Value : "All";

        results = await sessionStorage.GetAsync<string>(nameof(selectedDepartment));
        selectedDepartment = results.Success ? results.Value : "All";

        results = await sessionStorage.GetAsync<string>(nameof(selectedTitle));
        selectedTitle = results.Success ? results.Value : "All";

    }

    private async Task SaveFilter()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(selectedDepartment), selectedDepartment);
        await sessionStorage.SetAsync(nameof(selectedTitle), selectedTitle);
    }

    private async Task ApplyFilter()
    {
        var output = dataFactory.Employees;

        if(selectedDepartment != "All")
        {
            output = output.Where(e => e.Department?.Name == selectedDepartment).ToList();
        }

        if(selectedTitle != "All")
        {
            output = output.Where(e => e.Title?.Name == selectedTitle).ToList();
        }

        if(string.IsNullOrWhiteSpace(searchText) == false)
        {
            var stringComparison = StringComparison.InvariantCultureIgnoreCase;

            output = output.Where(e => e.FirstName.Contains(searchText, stringComparison) ||
                        e.LastName.Contains(searchText, stringComparison) ||
                        e.Extension.Equals(int.TryParse(searchText, out int searchNum) ? searchNum : null) ||
                        e.PhoneMain.Contains(searchText, stringComparison) ||
                        e.PhoneMobile.Contains(searchText, stringComparison)).ToList();
        }

        ///todo check if this is good practice or method should not be async task
        employees = output;
        await SaveFilter();

    }
}