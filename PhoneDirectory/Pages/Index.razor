@page "/"

@inject IDataFactory dataFactory
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Directory Home</PageTitle>
<style>
    th{
        cursor: pointer;
    }

    .employee-list-container
    {
        margin-left: 250px;
        margin-top: 10px;
        width: 50%;

    }

    .employee-list-item
    {
        
        border-radius: 10px;
    }

    .employee-list-item-content
    {
        margin-left: 10px;
    }

    .name-text
    {
        font-size: 21px;
        font-weight: 700;
    }

    .department-name
    {
        font-weight:700;
    }

    .employee-list-linebreak
    {
        
    }
</style>
<h1>Employees</h1>

<div>
    <input type="text" @bind=searchText placeholder="Search employees" aria-label="Search box" 
        @oninput="((txt) => OnSearchInput((string)txt.Value))"/>
</div>
<div>
    <div>@employees?.Count Employees</div>
</div>
<div>
    <h6>Sort by:</h6>
    <select id="sort-dropdown" @onchange="SortChange">
        <option disabled selected>Sort by...</option>
        @foreach (var sortValue in sortingDropdownItems)
        {
            if(sortValue.Contains("ASC"))
            {
                <option value="@sortValue">@sortValue.Replace("ASC", "") <p class="sort-arrow-icon">&#9650</p></option>
            } else if(sortValue.Contains("DESC"))
            {
                <option value="@sortValue">@sortValue.Replace("DESC", "") <p class="sort-arrow-icon">&#9660</p></option>
            }
        }
    </select>
</div>

@if (employees is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div  class="employee-list-container">
        <Virtualize Items="@employees" Context="e" OverscanCount="20">
            <div class="employee-list-item">
                <div class="employee-list-item-content">
                    <div class="name-text">@e.FirstName @e.LastName</div>
                        <div><text class="department-name">@e.Department.Name</text> @e.Title?.Name</div> 
                    <hr class="employee-list-linebreak">
                </div>
            </div>
        </Virtualize>
    </div>
    }


@code 
{
    private List<EmployeeModel> employees;
    private List<DepartmentModel> departments;
    private List<TitleModel> titles;

    private string searchText = "";
    private string selectedDepartment = "All";
    private string selectedTitle = "All";

    //sorting dropdown list
    List<string> sortingDropdownItems = new List<string>();
    private string currentSort = "";

    protected override async Task OnInitializedAsync()
    {
        await dataFactory.PopulateDataAsync();
        employees = dataFactory.Employees;
        departments = dataFactory.Departments;
        titles = dataFactory.Titles;
        sortingDropdownItems = PopulateSortDropdownItems();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadFilter();
            await ApplyFilter();
            StateHasChanged();
        }

    }

    private async Task LoadFilter()
    {
        var results = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = results.Success ? results.Value : "";

        results = await sessionStorage.GetAsync<string>(nameof(selectedDepartment));
        selectedDepartment = results.Success ? results.Value : "All";

        results = await sessionStorage.GetAsync<string>(nameof(selectedTitle));
        selectedTitle = results.Success ? results.Value : "All";

        results = await sessionStorage.GetAsync<string>(nameof(currentSort));
        currentSort = results.Success ? results.Value : "";

    }

    private async Task SaveFilter()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(selectedDepartment), selectedDepartment);
        await sessionStorage.SetAsync(nameof(selectedTitle), selectedTitle);
        await sessionStorage.SetAsync(nameof(currentSort), currentSort);

    }

    private async Task ApplyFilter()
    {
        var output = dataFactory.Employees;

        if(selectedDepartment != "All")
        {
            output = output.Where(e => e.Department?.Name == selectedDepartment).ToList();
        }

        if(selectedTitle != "All")
        {
            output = output.Where(e => e.Title?.Name == selectedTitle).ToList();
        }

        if(string.IsNullOrWhiteSpace(searchText) == false)
        {
            var stringComparison = StringComparison.InvariantCultureIgnoreCase;

            output = output.Where(e => 
                        e.FirstName.StartsWith(searchText, stringComparison) ||
                        e.LastName.StartsWith(searchText, stringComparison) ||
                        e.Extension.Contains(searchText, stringComparison) ||
                        e.PhoneMain.Contains(searchText, stringComparison) ||
                        e.PhoneMobile.Contains(searchText, stringComparison)).ToList();
        }

        switch(currentSort)
        {
            case "First Name ASC":
                output = output.OrderBy(e => e.FirstName).ToList();
                break;
            case "First Name DESC":
                output = output.OrderByDescending(e => e.FirstName).ToList();
                break;
            case "Last Name ASC":
                output = output.OrderBy(e => e.LastName).ToList();
                break;
            case "Last Name DESC":
                output = output.OrderByDescending(e => e.LastName).ToList();
                break;
            case "Title ASC":
                output = output.OrderBy(e => e.Title == null)
                                            .ThenBy(e => e.Title != null ? e.Title.Name : null).ToList();
                break;
            case "Title DESC":
                output = output.OrderByDescending(e => e.Title == null)
                                            .ThenByDescending(e => e.Title != null ? e.Title.Name : null).ToList();
                break;
            case "Department ASC":
                output = output.OrderBy(e => e.Department.Name).ToList();
                break;
            case "Department DESC":
                output = output.OrderByDescending(e => e.Department.Name).ToList();
                break;
            default:
                break;
        }

        employees = output;
        await SaveFilter();

    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await ApplyFilter();
    }

    private List<string> PopulateSortDropdownItems()
    {
        var output = new List<string>();
        output.Add("");
        output.Add("First Name ASC");
        output.Add("First Name DESC");
        output.Add("Last Name ASC");
        output.Add("Last Name DESC");
        output.Add("Title ASC");
        output.Add("Title DESC");
        output.Add("Department ASC");
        output.Add("Department DESC");

        return output;
    }

    private async Task OnDepartmentClick(DepartmentModel department)
    {
        selectedDepartment = department.Name;
        await ApplyFilter();
    }

    private async Task SortChange(ChangeEventArgs e)
    {
        currentSort = e.Value.ToString();
        await SaveFilter();
        await ApplyFilter();
        StateHasChanged();
    }

    private void OpenEmployeeDetails(EmployeeModel employee)
    {
        navManager.NavigateTo($"/EmployeeDetails/{employee.Id}");
    }
}