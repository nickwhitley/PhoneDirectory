@page "/Create/Employee"
@attribute [Authorize]

@inject IDataFactory dataFactory
@inject NavigationManager navManager

@using Models;

<head>
    <PageTitle>New Employee</PageTitle>
    <link rel="stylesheet" href="~/css/site.css"/>
</head>
<body>
    <div class="employee-create-grid-container">
        <div class="employee-create-heading">
            <h3 class="page-heading">Create Employee</h3>
            <button class="button" id="open-directory-button" @onclick="(() => OpenDirectory())">Go To Directory</button>
        </div>

        <div class="employee-create-form-container">
            <AuthorizeView Context="Auth">
                <Authorized>
                    <EditForm Model="newEmployee">
                            <DataAnnotationsValidator />
                             <ValidationSummary />
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="first-name">First Name</label>
                                <InputText class="input-box" id="first-name" @bind-Value="newEmployee.FirstName"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="last-name">Last Name</label>
                                <InputText class="input-box" id="last-name" @bind-Value="newEmployee.LastName"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="phone-main">Main Phone</label>
                                <InputText class="input-box" id="phone-main" @bind-Value="newEmployee.PhoneMain"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="extension">Extension</label>
                                <InputText class="input-box" id="extension" @bind-Value="newEmployee.Extension"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="phone-mobile">Mobile Phone</label>
                                <InputText class="input-box" id="phone-mobile" @bind-Value="newEmployee.PhoneMobile"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="email">Email</label>
                                <InputText class="input-box-email" id="email" @bind-Value="newEmployee.Email"/>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="department">Department</label>
                                <InputSelect class="input-select" id="department" @bind-Value="newEmployee.DepartmentId" 
                                                @onfocusout="((args) => OnInfoChange(args))">
                                    @foreach (var department in Departments)
                                    {
                                            <option value="@department.Id">@department.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="title">Title</label>
                                <InputSelect class="input-select" id="title" @bind-Value="newEmployee.TitleId" 
                                                @onfocusout="((args) => OnInfoChange(args))">
                                    @foreach (var title in Titles)
                                    {
                                                <option value="@title.Id">@title.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="supervisor">Supervisor</label>
                                <InputSelect class="input-select" id="supervisor" @bind-Value="newEmployee.SupId">
                                    @if (availableSupervisors is not null)
                                    {
                                        @foreach (var sup in availableSupervisors)
                                        {
                                                <option value="@sup.Id">@sup.FirstName @sup.LastName</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="employee-form-item">
                                <label class="employee-form-label" for="notes">Notes</label>
                                <InputTextArea class="input-text-area" id="notes" @bind-Value="newEmployee.Notes"/>
                            </div>
                            <div>
                               <button type="submit" class="button" id="create-form-button" @onclick="SaveNewEmployee">@submitButtonText</button>

                            </div>
                        </EditForm>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</body>

@code {
    private NewEmployeeModel newEmployee = new NewEmployeeModel();

    private List<TitleModel> Titles;
    private List<DepartmentModel> Departments;
    private List<EmployeeModel> availableSupervisors = new List<EmployeeModel>();
    private string submitButtonText;
    //may not use!!!
    private string firstName;
    private string lastName;
    private string phoneMain;
    private string phoneMobile;
    private string extension;
    private string notes;
    private int titleId;
    private int departmentId;
    private int supervisorId;
    private string email;

    protected override async Task OnInitializedAsync()
    {
        Titles = dataFactory.Titles;
        Departments = dataFactory.Departments;
        submitButtonText = "Create Employee";

        await base.OnInitializedAsync();
    }

    private async Task SaveNewEmployee()
    {
        var employeeConvert = new EmployeeModel()
            {
                FirstName = newEmployee.FirstName,
                LastName = newEmployee.LastName,
                PhoneMain = newEmployee.PhoneMain,
                PhoneMobile = newEmployee.PhoneMobile,
                Extension = newEmployee.Extension,
                Notes = newEmployee.Notes,
                TitleId = newEmployee.TitleId,
                DepartmentId = newEmployee.DepartmentId,
                SupId = newEmployee.SupId,
                Email = newEmployee.Email
            };
            if(newEmployee.FirstName == null){
                submitButtonText = "Nothing to submit!";
                await Task.Delay(2000);
                StateHasChanged();
                submitButtonText = "Create Employee";
            } else if(newEmployee.FirstName != null){
                await dataFactory.AddEmployeeAsync(employeeConvert);
                submitButtonText = "Employee Created!";
                await Task.Delay(2000);
                OpenDirectory();
            }
        
    }

    private void OnInfoChange(FocusEventArgs args)
    {
        if(newEmployee.TitleId != 0 && newEmployee.DepartmentId != 0)
        {
            availableSupervisors = dataFactory.GetAvailableSupervisors(newEmployee.TitleId, newEmployee.DepartmentId);
            
            
        }
    }

    private void OpenDirectory()
    {
        navManager.NavigateTo("/");
    }
}
