@page "/Create/Department"
@attribute [Authorize]

@inject IDataFactory dataFactory
@inject NavigationManager navManager

@using Models

<head>
    <PageTitle>Create Department</PageTitle>
    <link rel="stylesheet" href="~/css/site.css"/>
</head>
<body>
    <div class="department-create-grid-container">
        <div class="department-create-heading">
            <h3 class="page-heading">Create Department</h3>
            <button class="button" @onclick="(() => OpenDirectory())">Go To Directory</button>
        </div>
    </div>

    <div class="department-create-form-container">

    </div>
    <div>
        <div>
            <h3>New Department</h3>
        </div>
        <div class="department-create-form">
            <EditForm Model="newDepartment" OnValidSubmit="SaveNewDepartment">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="department-create-form-item">
                    <label for="department-name">Department Name</label>
                    <InputText class="input-box" id="department-name" @bind-Value="newDepartment.Name"/>
                </div>
                <div>
                    <button type="submit" class="button">Create Department</button>
                </div>
            </EditForm>
        </div>
    </div>
</body>

@code {
    private NewDepartmentModel newDepartment = new NewDepartmentModel();

    private string departmentName;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }

    private void SaveNewDepartment()
    {
        var departmentConvert = new DepartmentModel()
            {
                Name = newDepartment.Name
            };

        dataFactory.AddDepartment(departmentConvert);
        OpenDirectory();
    }
    private void OpenDirectory()
    {
        navManager.NavigateTo("/");
    }
}
