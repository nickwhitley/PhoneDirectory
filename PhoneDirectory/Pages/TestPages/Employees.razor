@page "/SampleData"

@using PhoneDirectoryLibrary.Data
@using PhoneDirectoryLibrary.Models

@inject IDataFactory dataFactory

<h3>Employees</h3>
<h4>Current Employees</h4>

@if (employees is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Main Phone</th>
                <th>Mobile Phone</th>
                <th>Extension</th>
                <th>Notes</th>
                <th>Title</th>
                <th>Department</th>
                <th>Supervisor</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.PhoneMain</td>
                    <td>@employee.PhoneMobile</td>
                    <td>@employee.Extension</td>
                    <td>@employee.Notes</td>
                    @if(employee.Title is null){
                        <td></td>
                    } else {
                        <td>@employee.Title.Name</td>
                    }
                    @if(employee.Department is null){
                        <td></td>
                    } else {
                        <td>@employee.Department.Name</td>
                    }
                    
                    @if (employee.Supervisor is null)
                    {
                        <td></td>
                    } else {
                        <td>@employee.Supervisor.LastName</td>
                    }
                    <td>@employee.Email</td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EmployeeModel> employees;

    protected override async Task OnInitializedAsync()
    {
        await dataFactory.PopulateDataAsync();
        employees = dataFactory.Employees;
    }
}
