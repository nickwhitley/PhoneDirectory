@page "/Admin"

@inject NavigationManager navManager
@inject IDataFactory dataFactory
@inject ProtectedSessionStorage sessionStorage

<head>
    <PageTitle>Admin Portal</PageTitle>
    <link rel="stylesheet" href="/css/site.css"/>
</head>
<body>
    <!--top bar-->
    <div>
        <div>
            <button class="back-to-directory-button" @onclick="OpenDirectory">Go To Directory</button>
        </div>
        <div>
            <button class="admin-logout-button" @onclick="AdminLogout">Logout</button>
        </div>
    </div>
    <!--tables-->
    <div>
        <div>
            <input type="text" @bind=employeeSearchText placeholder="Search Employees" aria-label="Search Box"
                @oninput="((txt) => OnSearchInput((string)txt.Value))"/>
        </div>
        <div>
            @foreach(var department in departments)
            {
                <button class="department-button" value="department" 
                    @onclick="(() => OpenDepartmentDetails(department))">@department.Name</button>
            }
        </div>
        <div>
            @if (employees is null)
            {
            <p><em>Loading...</em></p>
            }
            else
            {
            <div  class="employee-list-container">
                <Virtualize Items="@employees" Context="e" OverscanCount="20">
                    <div class="employee-list-item" @onclick="(() => OpenEmployeeDetails(e))">
                        <div class="employee-list-item-content">
                            <div class="name-text">@e.FirstName @e.LastName</div>
                            <div><text class="department-name">@e.Department.Name </text> 
                                    @if (e.Title.Name != "Untitled")
                                    {
                                        @e.Title.Name
                                    }</div>
                            <div>
                                    @string.Format("{0: #(###) ###-####}", Convert.ToInt64(e.PhoneMain))
                                x @e.Extension
                                    @string.Format("{0: #(###) ###-####}", Convert.ToInt64(e.PhoneMobile)) 
                                    @e.Email
                            </div>
                            <hr class="employee-list-linebreak">
                        </div>
                    </div>
                </Virtualize>
            </div>
            }
        </div>
    </div>
</body>


@code {
    private List<DepartmentModel> departments;
    private List<EmployeeModel> employees;

    private string employeeSearchText = "";

    protected override async Task OnInitializedAsync()
    {
        employees = dataFactory.Employees;
        departments = dataFactory.Departments;
        await base.OnInitializedAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadFilter();
            await ApplyFilter();
            StateHasChanged();
        }
    }

    private async Task SaveFilter()
    {
        await sessionStorage.SetAsync(nameof(employeeSearchText), employeeSearchText);
    }

    private async Task LoadFilter()
    {
        var results = await sessionStorage.GetAsync<string>(nameof(employeeSearchText));
        employeeSearchText = results.Success ? results.Value : "";
    }

    private async Task ApplyFilter()
    {
        var output = dataFactory.Employees;

        if(string.IsNullOrWhiteSpace(employeeSearchText) == false)
        {
            var stringComparison = StringComparison.InvariantCultureIgnoreCase;

            output = output.Where(e =>
                        e.FirstName.StartsWith(employeeSearchText, stringComparison) ||
                        e.LastName.StartsWith(employeeSearchText, stringComparison) ||
                        e.Extension.Contains(employeeSearchText, stringComparison) ||
                        e.PhoneMain.Contains(employeeSearchText, stringComparison) ||
                        e.PhoneMobile.Contains(employeeSearchText, stringComparison)).ToList();
        }

        employees = output;
        await SaveFilter();
    }

    private void OpenDepartmentDetails(DepartmentModel department)
    {

    }

    private void OpenEmployeeDetails(EmployeeModel employee)
    {
        navManager.NavigateTo($"EmployeeDetails/{employee.Id}");
    }

    private async Task OnSearchInput(string text)
    {
        employeeSearchText = text;
        await ApplyFilter();
    }

    private void AdminLogout()
    {
        OpenDirectory();
    }

    private void OpenDirectory()
    {
        navManager.NavigateTo("/");
    }
}
